EJB (Enterprise Java Bean)
- 가장 처음 IoC container
- 분산환경
- 무겁다

IoC container 만을 제공하는 것이 Spring

IoC (Inversion of Control)
- 필요한 곳에서 객체를 직접 생성하는것이 아니라 생성자나 setter 메서드를 통해 전달(제공) 받는 것
- DI (Dependency Injection)
- 결합도가 낮아져서 유지보수가 좋다
- 객체의 생명 주기를 직접 관리하지 않음
- factory pattern 사용 (factory 안에서 찍어내는거래)


한 컨테이너에 뭐가 여러개 못들어간대

BeanFactory는 interface이고 XmlBeanFactory가 구현한대
ApplicationContext는 ResourceBundle을 통해서 국제화, ieml을 지원
WebApplicationContext를 구현한게 XmlWebApplicationContext
FileSystem은 Bean configuration xml의 경로를 이야기 한다 (java가 시작되는 곳부터 상대경로로 생각...?)
ClassPath는 클래스의 시작점부터 경로 지정

Bean 엘리먼트 속성(p.29)

<!-- Collection, Map, Properties, array, Injection --> (p.43)


Annotation은 web 프로젝트 or 소규모 프로젝트에서 사용한다.
class 선언 위에 @component 붙일 수 있다.

@component
public class Tests
하면 tests 라는 id로 쓸 수 없다..... 무슨 말일까? 일단 p.47

@Autowired Annotation은 setter method, 속성, 생성자 위에 사용가능
속성위에 쓰면 setter 필요없고 기본생성자만 있으면 된다.



AOP (Aspected Oriendted Programming)

Pointcut
AspectJ 표현식으로 공통 모듈을 적용 시킬 핵심 모듈을 찾아오는것

AspectJ (p.66)
modifier 리턴타입 패키지명.클래스이름.메서드이름(인자)
modifier    *     이름 - *      *	   *      ..
생략 가능	  depth - ..
*은 모든것, ..은 상관없다 의미

ex)  * com.kdn.model.biz.*ServiceImpl.search*(..)
   의미 : com.kdn.model.biz에 있는 ServiceImpl로 끝나는 이름의 클래스에서 search로 시작하는 메서드를 인자와 상관없이 뽑아온다.

JoinPoint
Advice
Weaving
(p.61)