한 컨테이너에 id 가 두개 이상이면 에러 발생

lazy-init true시 해당 Bean 을 미리 생성하지 않고 실제 이용하는 시점(첫 getBean)에 생성
scope를 singleton 으로 지정했을 때 ! 
#server Program에서는 의미가 없음, 미리 다 올려놓고 서비스할 준비가 되어있어야 하기 때문
#client Program에서는 의미가 있음, 전부 생성해서 띄우면 늦기 때문에 필요할때마다 객체 생성

bean 객체 생성 시에 property로 생성하면 
기본생성자로 생성하며, name 에 맞는 객체의 변수에 직접 값을 setter 메서드로 입력한다.



AOP (Aspect Oriented Programming)
┌──────┐ ┌──────┐    ┌────────┐ ┌──────────────────┐ ┌──────────────────┐ 
│  D   │ │  F   │    │   A    │ │ BoardServiceImpl │ │ MemberServiceImpl│
├──────┤ ├──────┤    ├────────┤ ├──────────────────┤ ├──────────────────┤
│test()│ │test()│    │D.test()│ │D.test()		   │ │D.test()			│
│	   │ │	    │    │	      │ │	    		   │ │   				│
└──────┘ └──────┘    └────────┘ └──────────────────┘ └──────────────────┘

BoardServiceImpl
D.test

MemberServiceImpl
D.test


D에서 F 라는 메서드로 바뀌면 
D를 F로 바꿔줘야한다.



PointCut : Aspectj 표현식으로 공통 모듈을 적용할 핵심모듈을 찾아오는 것

modifier 리턴타입 패키지명.클래스이름.메서드이름(인자)
  생략		*	  name  *		*		  *		 ..
  				  depth ..

* com.kdn.model.biz.*ServiceImpl.search*(..)


JoinPoint : PointCut을 통해 찾아온 핵심모듈의 연결지점
			(핵심모듈 정보 : 메서드이름, 인자, 리턴정보)

Advise : JoinPoint에서 실행 시점을 충고한다.

weaving : Advise를 삽입한다.

 
~~~~~~~~~~~~~ 퀴즈 ~~~~~~~~~~~~~
DI 내에서만 설정하는법, 등등등
컨테이너 종류
bean 설정하는 법
추출하는 방법






controller 역할
	요청(.do)이 들어오면 요청에 따른 분기 혹은 그에 맞는 컨트롤러에서 역할 수행
	해당 수행이 가능하도록 페이지 이동.

	Spring에서는 요청 처리 및 이동을 다 담당해줌
	요청 결과를 담고 페이지 이동만 해주면 됨
	

		
			┌───────────────────────────────────────────────────────────────────────────┐
			│ WAS						┌───────────────────────────────┐				│
	┌───┐	│ ┌───────┐			   ┌───>┤  key		value				│				│
	│	├─>───┤ *.do  ├┐(1)		   │   ┌─"hello.do"	MainController.hello│				│
	└──┬┘	│ └───────┘│		   │   │└───────────────────────────────┘				│
	client	│  web.xml │		   │   │ Handler Mapper									│
Web browser │  		   │		   │   │┌───────────────────────────────────────────┐	│
	   │	│		   │		   │   ││@Controller								│	│
	   ^	│		   │(2)	   (3) │   ││public class main(){						│	│
	   │	│	┌──────┴─────────┐ │   ││	@RequestMapping(value="hello.do",		│	│
	   │	│	│Spring Container├<┘   ││				   method=RequestMethod.GET)│	│
	   │	│	└───┬───────┬────┘     └────public String hello(){					│	│
	   │	│	Dispatcher Servlet	   	│	  return "hello.jsp"					│	│
	   │	│		│		│  		 (4)│ 	}										│	│
	   ^	│		│		└<─────────>┤ 	...										│	│
	   │	│		│		(5)			│}											│	│
	   │	│	 (6)│					└───────────────────────────────────────────┘	│						
	   │	│	┌───┴───────────┐		Controller										│
	   └─<──────┤				│														│
		(7)	│	└───────────────┘														│
			│	View Resolver															│
			└───────────────────────────────────────────────────────────────────────────┘

1. web.xml에 Dispatcher Servlet등록
2. Bean Configuration 파일을 Dispatcher Servlet에 설정 => 컨테이너 생성 및 요청에 따른 분기
3. Controller 작성

(1) hello.do 요청
(2) Dispatcher Servlet으로 이동
(3) Handler Mapper 조회
(4) 조회된 url에 따른 Controller 메서드 호출
(5) View 정보 리턴 
(6) View Resolver를 통해 View를 찾거나 View를 생성
(7) View 제공

DispatcherServlet : Spring Container 생성
					요청 작업을 처리할수 있도록 분기 



